Testing results for CFG to CNF, successful 
Testing results for CFG to CNF, successful 
Testing results for CFG to CNF, successful 


----------------------------------------------------------------------
Ran 2 tests in 0.011s

OK

C:\Users\prent\OneDrive\Desktop\CS4430\toc_final\src>python -m unittest CFG_TO_CNF_TESTS.py


testing cnf1 production rules, terminals and nonterminals
.

testing cnf2 production rules, terminals and nonterminals
.
----------------------------------------------------------------------
Ran 2 tests in 0.009s

OK


Testing results for CFG to PDA, successful
Testing results for CFG to PDA, successful
Testing results for CFG to PDA, successful


----------------------------------------------------------------------
Ran 3 tests in 0.048s

OK

C:\Users\prent\OneDrive\Desktop\CS4430\toc_final\src>python -m unittest CFG_TO_PDA_TESTS.py
nonTerminals = {'L', 'E'}
terminals = {')', 'x', '('}
productionRules = [('E', ['(', 'L', ')']), ('E', ['x']), ('L', ['L', 'E']), ('L', ['E', 'E'])]
startingSymbol = E


states = {'7', '15', '6', '5', '8', '14', '3', '16', '10', '2', '1', '9', '4', '13', '12', '11'}
inputAlphabet = {')', 'x', '('}
stackAlphabet = {'x', 'T', 'E', '(', ')', 'L'}
RTransitionFunctions = {('3', '5', '', 'E'), ('3', '9', '', 'E'), ('3', '3', 'x', 'x'), ('3', '3', ')', ')'), ('3', '11', '', 'L'), ('3', '3', '(', '('), ('3', '4', '', 'T'), ('3', '14', '', 'L')}
ETransitionFunctions = {('16', '3', '', ''), ('15', '16', '', 'E'), ('6', '7', '', 'L'), ('12', '13', '', 'L'), ('14', '15', '', 'E'), ('13', '3', '', ''), ('1', '2', '', 'T'), ('2', '3', '', 'E'), ('9', '10', '', 'x'), ('10', '3', '', ''), ('5', '6', '', ')'), ('7', '8', '', '('), ('11', '12', '', 'E'), ('8', '3', '', '')}
startState = 1
acceptingStates = {'4'}
.nonTerminals = {'C', 'A', 'S'}
terminals = {'b', 'a'}
productionRules = [('S', ['A', 'b']), ('S', ['b', 'A']), ('A', ['C', 'A', 'C']), ('A', ['a']), ('C', ['a']), ('C', ['b'])]
startingSymbol = S


states = {'7', '15', '6', '14', '19', '2', '1', '13', '17', '8', '18', '3', '20', '4', '16', '5', '10', '9', '12', '11'}
inputAlphabet = {'b', 'a'}
stackAlphabet = {'A', 'b', 'T', 'C', 'a', 'S'}
RTransitionFunctions = {('3', '5', '', 'S'), ('3', '19', '', 'C'), ('3', '3', 'b', 'b'), ('3', '17', '', 'C'), ('3', '11', '', 'A'), ('3', '3', 'a', 'a'), ('3', '4', '', 'T'), ('3', '15', '', 'A'), ('3', '8', '', 'S')}
ETransitionFunctions = {('16', '3', '', ''), ('17', '18', '', 'a'), ('12', '13', '', 'A'), ('7', '3', '', ''), ('2', '3', '', 'S'), ('1', '2', '', 'T'), ('6', '7', '', 'A'), ('9', '10', '', 'b'), ('15', '16', '', 'a'), ('18', '3', '', ''), ('20', '3', '', ''), ('14', '3', '', ''), ('5', '6', '', 'b'), ('10', '3', '', ''), ('13', '14', '', 'C'), ('19', '20', '', 'b'), ('11', '12', '', 'C'), ('8', '9', '', 'A')}
startState = 1
acceptingStates = {'4'}
.nonTerminals = {'1'}
terminals = {'b'}
productionRules = [('1', ['b'])]
startingSymbol = 1


states = {'6', '5', '3', '2', '1', '4'}
inputAlphabet = {'b'}
stackAlphabet = {'b', 'T', '1'}
RTransitionFunctions = {('3', '4', '', 'T'), ('3', '5', '', '1'), ('3', '3', 'b', 'b')}
ETransitionFunctions = {('6', '3', '', ''), ('5', '6', '', 'b'), ('2', '3', '', '1'), ('1', '2', '', 'T')}
startState = 1
acceptingStates = {'4'}


